// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model employees {
  id              Int          @id @default(autoincrement())
  first_name      String       @db.VarChar(30)
  last_name       String       @db.VarChar(30)
  email           String?      @unique @db.VarChar(30)
  phone_number    String?
  job             jobs?        @relation(fields: [job_title], references: [job_title])
  job_title       String?
  manager         managers?    @relation("ManagerToEmployee", fields: [manager_id], references: [id])
  manager_id      Int?
  department      departments? @relation(fields: [department_name], references: [department_name])
  department_name String?
  location        locations?   @relation(fields: [location_name], references: [location_name])
  location_name   String?
  starting_date   DateTime?    @default(now())
  salary          Int?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  role            Role         @default(BASIC)
  managers        managers[]   @relation("EmployeeToManager")
  attendance      attendance[]
  app_users       app_users[]
  clock           clock[]
}

model departments {
  id              Int         @id @default(autoincrement())
  department_name String?     @unique @db.VarChar(30)
  employees       employees[]
}

model jobs {
  id        Int         @id @default(autoincrement())
  job_title String      @unique @db.VarChar(30)
  employees employees[]
  managers  managers[]
}

model locations {
  id              Int         @id @default(autoincrement())
  location_name   String      @unique @db.VarChar(30)
  number_of_staff Int?        @default(0)
  employees       employees[]
}

model managers {
  id          Int         @id @default(autoincrement())
  employee    employees?  @relation("EmployeeToManager", fields: [employee_id], references: [id])
  employee_id Int?        @unique
  job         jobs?       @relation(fields: [job_title], references: [job_title])
  job_title   String?
  employees   employees[] @relation("ManagerToEmployee")
}

model attendance {
  id          Int        @id @default(autoincrement())
  employee    employees? @relation(fields: [employee_id], references: [id])
  employee_id Int?
  status      String
}

model app_users {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  first_name  String
  last_name   String
  UUID        String
  employee    employees? @relation(fields: [employee_id], references: [id])
  employee_id Int?
}

model clock {
  id          Int        @id @default(autoincrement())
  employee    employees? @relation(fields: [employee_id], references: [id])
  employee_id Int?
  clock_in    DateTime?  @default(now())
  clock_out   DateTime?
}

enum Role {
  BASIC
  ADMIN
}

//create a new salary_table for salary range.
//delete hr_employees_tableid
//make the phone number nullable and also string or BigInt!
//make the managerId nullable
